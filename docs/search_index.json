[["index.html", "R Basics An Introduction to Programming for Researchers Overview", " R Basics An Introduction to Programming for Researchers Nick Ulle 2021-04-13 Overview This 4-part workshop series provides an introduction to using the R programming language for reproducible data analysis and scientific computing. Topics include programming basics, how to work with tabular data, how to break down programming problems, and how to organize code for clarity and reproducibility. After this workshop, learners will be able to load tabular data sets into R, compute simple summaries and visualizations, do common data-tidying tasks, write reusable functions, and identify where to go to learn more. No prior programming experience is necessary. All learners will need access to an internet-connected computer and the latest version of Zoom, R, and RStudio. "],["getting-started.html", "1 Getting Started 1.1 Prerequisites 1.2 The R Interface 1.3 Getting Help 1.4 File Systems 1.5 Reading Files 1.6 Data Frames 1.7 Vectors 1.8 Data Types 1.9 Indexing", " 1 Getting Started R is a program for statistical computing. It provides a rich set of built-in tools for cleaning, exploring, modeling, and visualizing data. The main way you’ll interact with R is by writing code or expressions in the R programming language. Most people use “R” as a blanket term to refer to both the program and the programming language. Usually, the distinction doesn’t matter, but in cases where it does, we’ll point it out and be specific. By writing code, you create an unambiguous record of every step taken in an analysis. This it one of the major advantages of R (and other programming languages) over point-and-click software like Tableau and Microsoft Excel. Code you write in R is reproducible: you can share it with someone else, and if they run it with the same inputs, they’ll get the same results. Another advantage of writing code is that it’s often reusable. This can mean automating a repetitive task within a single analysis, recycling code from one analysis into another, or packaging useful code for distribution to the general public. At the time of writing, there were over 17,000 user-contributed packages available for R, spanning a broad range of disciplines. R is one of many programming languages used in data science. Compared to other programming languages, R’s particular strengths are its interactivity, built-in support for handling missing data, the ease with which you can produce high-quality data visualizations, and its broad base of user-contributed packages (due to both its age and growing popularity). 1.1 Prerequisites You can download R for free here, and can find an install guide here. In addition to R, you’ll need RStudio. RStudio is an integrated development environment (IDE), which means it’s a comprehensive program for writing, editing, searching, and running code. You can do all of these things without RStudio, but RStudio makes the process easier. You can download RStudio Desktop Open-Source Edition for free here, and can find an install guide here. 1.2 The R Interface The first time you open RStudio, you’ll see a window divided into several panes, like this: Don’t worry if the text in the panes isn’t exactly the same on your computer; it depends on your operating system and versions of R and RStudio. The console pane, on the left, is the main interface to R. If you type R code into the console and press the Enter key on your keyboard, R will run your code and return the result. On the right are the environment pane and the plots pane. The environment pane shows data in your R workspace. The plots pane shows any plots you make, and also has tabs to browse your file system and to view R’s built-in help files. We’ll learn more about these gradually, but to get started we’ll focus on the console pane. Let’s start by using R to do some arithmetic. In the console, you’ll see that the cursor is on a line that begins with &gt;, called the prompt. You can make R compute the sum \\(2 + 2\\) by typing the code 2 + 2 after the prompt and then pressing the Enter key. Your code and the result from R should look like this: R always puts the result on a separate line (or lines) from your code. In this case, the result begins with the tag [1], which is a hint from R that the result is a vector and that this line starts with the element at position 1. We’ll learn more about vectors in Section 1.7, and eventually learn about other data types that are displayed differently. The result of the sum, 4, is displayed after the tag. In this reader, results from R will usually be typeset in monospace and further prefixed with ## to indicate that they aren’t code. If you enter an incomplete expression, R will change the prompt to +, then wait for you to type the rest of the expression and press the Enter key. Here’s what it looks like if you only enter 2 +: You can finish entering the expression, or you can cancel it by pressing the Esc key (or Ctrl-c if you’re using R without RStudio). R can only tell an expression is incomplete if it’s missing something, like the second operand in 2 +. So if you mean to enter 2 + 2 but accidentally enter 2, which is a complete expression by itself, don’t expect R to read your mind and wait for more input! Try out some other arithmetic in the R console. Besides + for addition, the other arithmetic operators are: - for subtraction * for multiplication / for division %% for remainder division (modulo) ^ or ** for exponentiation You can combine these and use parentheses to make more complicated expressions, just as you would when writing a mathematical expression. When R computes a result, it follows the standard order of operations: parentheses, exponentiation, multiplication, division, addition, and finally subtraction. For example, to estimate the area of a circle with radius 3, you can write: 3.14 * 3^2 ## [1] 28.26 You can write R expressions with any number of spaces (including none) around the operators and R will still compute the result. Nevertheless, putting spaces in your code makes it easier for you and others to read, so it’s good to make it a habit. Put spaces around most operators, after commas, and after keywords. 1.2.1 Variables Since R is designed for mathematics and statistics, you might expect that it provides a better appoximation for \\(\\pi\\) than 3.14. R and most other programming languages allow you to create named values, or variables. R provides a built-in variable called pi for the value of \\(\\pi\\). You can display a variable’s value by entering its name in the console: pi ## [1] 3.141593 You can also use variables in expressions. For instance, here’s a more precise expression for the area of a circle with radius 3: pi * 3^2 ## [1] 28.27433 You can define your own variables with the assignment operator = or &lt;-. In most circumstances these two operators are interchangeable. For clarity, it’s best to choose one you like and use it consistently in all of your R code. In this reader, we use = for assignment because this is the assignment operator in most programming languages. The main reason to use variables is to save results so that you can use them on other expressions later. For example, to save the area of the circle in a variable called area, we can write: area = pi * 3^2 In R, variable names can contain any combination of letters, numbers, dots ., and underscores _, but must always start with a letter or a dot. Spaces and other symbols are not allowed in variable names. Now we can use the area variable anywhere we want the computed area. Notice that when you assign a result to a variable, R doesn’t automatically display that result. If you want to see the result as well, you have to enter the variable’s name as a separate expression: area ## [1] 28.27433 Another reason to use variables is to make an expression more general. For instance, you might want to compute the area of several circles with different radii. Then the expression pi * 3^2 is too specific. You can rewrite it as pi * r^2, and then assign a value to the variable r just before you compute the area. Here’s the code to compute and display the area of a circle with radius 1 this way: r = 1 area = pi * r^2 area ## [1] 3.141593 Now if you want to compute the area for a different radius, all you have to do is change r and run the code again (R will not change area until you do this). Writing code that’s general enough to reuse across multiple problems can be a big time-saver in the long run. Later on, we’ll see ways to make this code even easier to reuse. 1.2.2 Calling Functions R can do a lot more than just arithmetic. Most of R’s features are provided through functions, pieces of reusable code. You can think of a function as a machine that takes some inputs and uses them to produce some output. In programming jargon, the inputs to a function are called arguments, the output is called the return value, and when we use a function, we say we’re calling the function. To call a function, write its name followed by parentheses. Put any arguments to the function inside the parentheses. For example, in R, the sine function is named sin (there are also cos and tan). So we can compute the sine of \\(\\pi / 4\\) with this code: sin(pi / 4) ## [1] 0.7071068 There are many functions that accept more than one argument. For instance, the sum function accepts any number of arguments and adds them all together. When you call a function with multiple arguments, separate the arguments with commas. So another way to compute \\(2 + 2\\) in R is: sum(2, 2) ## [1] 4 When you call a function, R assigns each argument to a parameter. Parameters are special variables that represent the inputs to a function and only exist while that function runs. For example, the log function, which computes a logarithm, has parameters x and base for the operand and base of the logaritm, respectively. The next section, Section 1.3, explains how to look up the parameters for a function. By default, R assigns arguments to parameters based on their order. The first argument is assigned to the function’s first parameter, the second to the second, and so on. So we can compute the logarithm of 64, base 2, with this code: log(64, 2) ## [1] 6 The argument 64 is assigned to the parameter x, and the argument 2 is assigned to the parameter base. You can also assign arguments to parameters by name with = (not &lt;-), overriding their positions. So some other ways we could write the call above are: log(64, base = 2) ## [1] 6 log(x = 64, base = 2) ## [1] 6 log(base = 2, x = 64) ## [1] 6 log(base = 2, 64) ## [1] 6 All of these are equivalent. When you write code, choose whatever seems the clearest to you. Leaving parameter names out of calls saves typing, but including some or all of them can make the code easier to understand. Parameters are not regular variables, and only exist while their associated function runs. You can’t set them before a call, nor can you access them after a call. So this code causes an error: x = 64 log(base = 2) ## Error in eval(expr, envir, enclos): argument &quot;x&quot; is missing, with no default In the error message, R says that we forgot to assign an argument to the parameter x. We can keep the variable x and correct the call by making x an argument (for the parameter x): log(x, base = 2) ## [1] 6 Or, written more explicitly: log(x = x, base = 2) ## [1] 6 In summary, variables and parameters are distinct, even if they happen to have the same name. The variable x is not the same thing as the parameter x. 1.3 Getting Help Learning and using a language is hard, so it’s important to know how to get help. The first place to look for help is R’s built-in documentation. In the console, you can access a specific help page by name with ? followed by the name of the page. There are help pages for all of R’s built-in functions, usually with the same name as the function itself. So the code to open the help page for the log function is: ?log For functions, help pages usually include a brief description, a list of parameters, a description of the return value, and some examples. There are also help pages for other topics, such as built-in mathematical constants (such as ?pi), data sets (such as ?iris), and operators. To look up the help page for an operator, put the operator’s name in single or double quotes. For example, this code opens the help page for the arithmetic operators: ?&quot;+&quot; It’s always okay to put quotes around the name of the page when you use ?, but they’re only required if it contains non-alphabetic characters. So ?sqrt, ?'sqrt', and ?\"sqrt\" all open the documentation for sqrt, the square root function. R treats anything inside single or double quotes as literal text rather than as an expression to evaluate. In programming jargon, a piece of literal text is called a string. You can use whichever kind of quotes you prefer, but the quote at the beginning of the string must match the quote at the end. Sometimes you might not know the name of the help page you want to look up. You can do a general search of R’s help pages with ?? followed by a string of search terms. For example, to get a list of all help pages related to linear models: ??&quot;linear model&quot; This search function doesn’t always work well, and it’s often more efficient to use an online search engine. When you search for help with R online, include “R” as a search term. Alternatively, you can use RSeek, which restricts the search to a selection of R-related websites. 1.3.1 What to Do When Something Goes Wrong As a programmer, sooner or later you’ll run some code and get an error message or result you didn’t expect. Don’t panic! Even experienced programmers make mistakes regularly, so learning how to diagnose and fix problems is vital. Try going through these steps: If R returned a warning or error message, read it! If you’re not sure what the message means, try searching for it online. Check your code for typographical errors, including incorrect capitalization and missing or extra commas, quotes, and parentheses. Test your code one line at a time, starting from the beginning. After each line that assigns a variable, check that the value of the variable is what you expect. Try to determine the exact line where the problem originates (which may differ from the line that emits an error!). If none of these steps help, try asking online. Stack Overflow is a popular question and answer website for programmers. Before posting, make sure to read about how to ask a good question. 1.4 File Systems 1.4.1 The Working Directory 1.5 Reading Files 1.6 Data Frames 1.7 Vectors 1.8 Data Types 1.8.1 Matrices 1.8.2 Lists 1.8.3 Special Values 1.8.4 Factors 1.9 Indexing "]]
