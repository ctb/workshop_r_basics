[["index.html", "R Basics An Introduction to Programming for Researchers Overview", " R Basics An Introduction to Programming for Researchers Nick Ulle 2021-05-12 Overview This 4-part workshop series provides an introduction to using the R programming language for reproducible data analysis and scientific computing. Topics include programming basics, how to work with tabular data, how to break down programming problems, and how to organize code for clarity and reproducibility. After this workshop, learners will be able to load tabular data sets into R, compute simple summaries and visualizations, do common data-tidying tasks, write reusable functions, and identify where to go to learn more. No prior programming experience is necessary. All learners will need access to an internet-connected computer and the latest version of Zoom, R, and RStudio. "],["getting-started.html", "1 Getting Started 1.1 Prerequisites 1.2 The R Interface 1.3 Getting Help 1.4 File Systems 1.5 Reading Files 1.6 Data Frames 1.7 Vectors", " 1 Getting Started R is a program for statistical computing. It provides a rich set of built-in tools for cleaning, exploring, modeling, and visualizing data. The main way you’ll interact with R is by writing code or expressions in the R programming language. Most people use “R” as a blanket term to refer to both the program and the programming language. Usually, the distinction doesn’t matter, but in cases where it does, we’ll point it out and be specific. By writing code, you create an unambiguous record of every step taken in an analysis. This it one of the major advantages of R (and other programming languages) over point-and-click software like Tableau and Microsoft Excel. Code you write in R is reproducible: you can share it with someone else, and if they run it with the same inputs, they’ll get the same results. Another advantage of writing code is that it’s often reusable. This can mean automating a repetitive task within a single analysis, recycling code from one analysis into another, or packaging useful code for distribution to the general public. At the time of writing, there were over 17,000 user-contributed packages available for R, spanning a broad range of disciplines. R is one of many programming languages used in data science. Compared to other programming languages, R’s particular strengths are its interactivity, built-in support for handling missing data, the ease with which you can produce high-quality data visualizations, and its broad base of user-contributed packages (due to both its age and growing popularity). 1.1 Prerequisites You can download R for free here, and can find an install guide here. In addition to R, you’ll need RStudio. RStudio is an integrated development environment (IDE), which means it’s a comprehensive program for writing, editing, searching, and running code. You can do all of these things without RStudio, but RStudio makes the process easier. You can download RStudio Desktop Open-Source Edition for free here, and can find an install guide here. 1.2 The R Interface The first time you open RStudio, you’ll see a window divided into several panes, like this: Don’t worry if the text in the panes isn’t exactly the same on your computer; it depends on your operating system and versions of R and RStudio. The console pane, on the left, is the main interface to R. If you type R code into the console and press the Enter key on your keyboard, R will run your code and return the result. On the right are the environment pane and the plots pane. The environment pane shows data in your R workspace. The plots pane shows any plots you make, and also has tabs to browse your file system and to view R’s built-in help files. We’ll learn more about these gradually, but to get started we’ll focus on the console pane. Let’s start by using R to do some arithmetic. In the console, you’ll see that the cursor is on a line that begins with &gt;, called the prompt. You can make R compute the sum \\(2 + 2\\) by typing the code 2 + 2 after the prompt and then pressing the Enter key. Your code and the result from R should look like this: R always puts the result on a separate line (or lines) from your code. In this case, the result begins with the tag [1], which is a hint from R that the result is a vector and that this line starts with the element at position 1. We’ll learn more about vectors in Section 1.7, and eventually learn about other data types that are displayed differently. The result of the sum, 4, is displayed after the tag. In this reader, results from R will usually be typeset in monospace and further prefixed with ## to indicate that they aren’t code. If you enter an incomplete expression, R will change the prompt to +, then wait for you to type the rest of the expression and press the Enter key. Here’s what it looks like if you only enter 2 +: You can finish entering the expression, or you can cancel it by pressing the Esc key (or Ctrl-c if you’re using R without RStudio). R can only tell an expression is incomplete if it’s missing something, like the second operand in 2 +. So if you mean to enter 2 + 2 but accidentally enter 2, which is a complete expression by itself, don’t expect R to read your mind and wait for more input! Try out some other arithmetic in the R console. Besides + for addition, the other arithmetic operators are: - for subtraction * for multiplication / for division %% for remainder division (modulo) ^ or ** for exponentiation You can combine these and use parentheses to make more complicated expressions, just as you would when writing a mathematical expression. When R computes a result, it follows the standard order of operations: parentheses, exponentiation, multiplication, division, addition, and finally subtraction. For example, to estimate the area of a circle with radius 3, you can write: 3.14 * 3^2 ## [1] 28.26 You can write R expressions with any number of spaces (including none) around the operators and R will still compute the result. Nevertheless, putting spaces in your code makes it easier for you and others to read, so it’s good to make it a habit. Put spaces around most operators, after commas, and after keywords. 1.2.1 Variables Since R is designed for mathematics and statistics, you might expect that it provides a better appoximation for \\(\\pi\\) than 3.14. R and most other programming languages allow you to create named values, or variables. R provides a built-in variable called pi for the value of \\(\\pi\\). You can display a variable’s value by entering its name in the console: pi ## [1] 3.141593 You can also use variables in expressions. For instance, here’s a more precise expression for the area of a circle with radius 3: pi * 3^2 ## [1] 28.27433 You can define your own variables with the assignment operator = or &lt;-. In most circumstances these two operators are interchangeable. For clarity, it’s best to choose one you like and use it consistently in all of your R code. In this reader, we use = for assignment because this is the assignment operator in most programming languages. The main reason to use variables is to save results so that you can use them on other expressions later. For example, to save the area of the circle in a variable called area, we can write: area = pi * 3^2 In R, variable names can contain any combination of letters, numbers, dots ., and underscores _, but must always start with a letter or a dot. Spaces and other symbols are not allowed in variable names. Now we can use the area variable anywhere we want the computed area. Notice that when you assign a result to a variable, R doesn’t automatically display that result. If you want to see the result as well, you have to enter the variable’s name as a separate expression: area ## [1] 28.27433 Another reason to use variables is to make an expression more general. For instance, you might want to compute the area of several circles with different radii. Then the expression pi * 3^2 is too specific. You can rewrite it as pi * r^2, and then assign a value to the variable r just before you compute the area. Here’s the code to compute and display the area of a circle with radius 1 this way: r = 1 area = pi * r^2 area ## [1] 3.141593 Now if you want to compute the area for a different radius, all you have to do is change r and run the code again (R will not change area until you do this). Writing code that’s general enough to reuse across multiple problems can be a big time-saver in the long run. Later on, we’ll see ways to make this code even easier to reuse. 1.2.2 Calling Functions R can do a lot more than just arithmetic. Most of R’s features are provided through functions, pieces of reusable code. You can think of a function as a machine that takes some inputs and uses them to produce some output. In programming jargon, the inputs to a function are called arguments, the output is called the return value, and when we use a function, we say we’re calling the function. To call a function, write its name followed by parentheses. Put any arguments to the function inside the parentheses. For example, in R, the sine function is named sin (there are also cos and tan). So we can compute the sine of \\(\\pi / 4\\) with this code: sin(pi / 4) ## [1] 0.7071068 There are many functions that accept more than one argument. For instance, the sum function accepts any number of arguments and adds them all together. When you call a function with multiple arguments, separate the arguments with commas. So another way to compute \\(2 + 2\\) in R is: sum(2, 2) ## [1] 4 When you call a function, R assigns each argument to a parameter. Parameters are special variables that represent the inputs to a function and only exist while that function runs. For example, the log function, which computes a logarithm, has parameters x and base for the operand and base of the logaritm, respectively. The next section, Section 1.3, explains how to look up the parameters for a function. By default, R assigns arguments to parameters based on their order. The first argument is assigned to the function’s first parameter, the second to the second, and so on. So we can compute the logarithm of 64, base 2, with this code: log(64, 2) ## [1] 6 The argument 64 is assigned to the parameter x, and the argument 2 is assigned to the parameter base. You can also assign arguments to parameters by name with = (not &lt;-), overriding their positions. So some other ways we could write the call above are: log(64, base = 2) ## [1] 6 log(x = 64, base = 2) ## [1] 6 log(base = 2, x = 64) ## [1] 6 log(base = 2, 64) ## [1] 6 All of these are equivalent. When you write code, choose whatever seems the clearest to you. Leaving parameter names out of calls saves typing, but including some or all of them can make the code easier to understand. Parameters are not regular variables, and only exist while their associated function runs. You can’t set them before a call, nor can you access them after a call. So this code causes an error: x = 64 log(base = 2) ## Error in eval(expr, envir, enclos): argument &quot;x&quot; is missing, with no default In the error message, R says that we forgot to assign an argument to the parameter x. We can keep the variable x and correct the call by making x an argument (for the parameter x): log(x, base = 2) ## [1] 6 Or, written more explicitly: log(x = x, base = 2) ## [1] 6 In summary, variables and parameters are distinct, even if they happen to have the same name. The variable x is not the same thing as the parameter x. 1.3 Getting Help Learning and using a language is hard, so it’s important to know how to get help. The first place to look for help is R’s built-in documentation. In the console, you can access a specific help page by name with ? followed by the name of the page. There are help pages for all of R’s built-in functions, usually with the same name as the function itself. So the code to open the help page for the log function is: ?log For functions, help pages usually include a brief description, a list of parameters, a description of the return value, and some examples. There are also help pages for other topics, such as built-in mathematical constants (such as ?pi), data sets (such as ?iris), and operators. To look up the help page for an operator, put the operator’s name in single or double quotes. For example, this code opens the help page for the arithmetic operators: ?&quot;+&quot; It’s always okay to put quotes around the name of the page when you use ?, but they’re only required if it contains non-alphabetic characters. So ?sqrt, ?'sqrt', and ?\"sqrt\" all open the documentation for sqrt, the square root function. R treats anything inside single or double quotes as literal text rather than as an expression to evaluate. In programming jargon, a piece of literal text is called a string. You can use whichever kind of quotes you prefer, but the quote at the beginning of the string must match the quote at the end. Sometimes you might not know the name of the help page you want to look up. You can do a general search of R’s help pages with ?? followed by a string of search terms. For example, to get a list of all help pages related to linear models: ??&quot;linear model&quot; This search function doesn’t always work well, and it’s often more efficient to use an online search engine. When you search for help with R online, include “R” as a search term. Alternatively, you can use RSeek, which restricts the search to a selection of R-related websites. 1.3.1 When Something Goes Wrong As a programmer, sooner or later you’ll run some code and get an error message or result you didn’t expect. Don’t panic! Even experienced programmers make mistakes regularly, so learning how to diagnose and fix problems is vital. Try going through these steps: If R returned a warning or error message, read it! If you’re not sure what the message means, try searching for it online. Check your code for typographical errors, including incorrect capitalization and missing or extra commas, quotes, and parentheses. Test your code one line at a time, starting from the beginning. After each line that assigns a variable, check that the value of the variable is what you expect. Try to determine the exact line where the problem originates (which may differ from the line that emits an error!). If none of these steps help, try asking online. Stack Overflow is a popular question and answer website for programmers. Before posting, make sure to read about how to ask a good question. 1.4 File Systems Most of the time, you won’t just write code directly into the R console. Reproducibility and reusability are important benefits of R over point-and-click software, and in order to realize these, you have to save your code to your computer’s hard drive. Let’s start by reviewing how files on a computer work. You’ll need to understand that before you can save your code, and it will also be important later on for loading data sets. Your computer’s file system is a collection of files (chunks of data) and directories (or “folders”) that organize those files. For instance, the file system on a computer shared by Ada and Charles, two pioneers of computing, might look like this: Don’t worry if your file system looks a bit different from the picture. File systems have a tree-like structure, with a top-level directory called the root directory. On Ada and Charles’ computer, the root is called /, which is also what it’s called on all macOS and Linux computers. On Windows, the root is usually called C:/, but sometimes other letters, like D:/, are also used depending on the computer’s hardware. A path is a list of directories that leads to a specific file or directory on a file system (imagine giving directons to someone as they walk through the file system). We use forward slashes / to separate the directories in a path, rather than commas or spaces. The root directory includes a forward slash as part of its name, and doesn’t need an extra one. For example, suppose Ada wants to write a path to the file cats.csv. She can write the path like this: /Users/ada/cats.csv You can read this path from left-to-right as, “Starting from the root directory, go to the Users directory, then from there go to the ada directory, and from there go to the file cats.csv.” Alternatively, you can read the path from right-to-left as, “The file cats.csv inside of the ada directory, which is inside of the Users directory, which is in the root directory.” As another example, suppose Charles wants a path to the Programs directory. He can write: /Programs/ The / at the end of this path is reminder that Programs is a directory, not a file. Charles could also write the path like this: /Programs This is still correct, but it’s not as obvious that Programs is a directory. In other words, when a path leads to a directory, including a trailing slash is optional, but makes the meaning of the path clearer. Paths that lead to files never have a trailing slash. On Windows computers, paths are usually written with backslashes \\ to separate directories instead of forward slashes. Fortunately, R uses forward slashes / for all paths, regardless of the operating system. So when you’re working in R, use forward slashes and don’t worry about the operating system. This is especially convenient when you want to share code with someone that uses a different operating system than you. 1.4.1 Absolute &amp; Relative Paths A path that starts from the root directory, like all of the ones we’ve seen so far, is called an absolute path. The path is “absolute” because it unambiguously describes where a file or directory is located. The downside is that absolute paths usually don’t work well if you share your code. For example, suppose Ada uses the path /Programs/ada/cats.csv to load the cats.csv file in her code. If she shares her code with another pioneer of computing, say Gladys, who also has a copy of cats.csv, it might not work. Even though Gladys has the file, she might not have it in a directory called ada, and might not even have a directory called ada on her computer. Because Ada used an absolute path, her code works on her own computer, but isn’t portable to others. On the other hand, a relative path is one that doesn’t start from the root directory. The path is “relative” to an unspecified starting point, which usually depends on the context. For instance, suppose Ada’s code is saved in the file analysis.R (more about .R files in Section 1.4.2), which is in the same directory as cats.csv on her computer. Then instead of an absolute path, she can use a relative path in her code: cats.csv The context is the location of analysis.R, the file that contains the code. In other words, the starting point on Ada’s computer is the ada directory. On other computers, the starting point will be different, depending on where the code is stored. Now suppose Ada sends her corrected code in analysis.R to Gladys, and tells Gladys to put it in the same directory as cats.csv. Since the path cats.csv is relative, the code will still work on Gladys’ computer, as long as the two files are in the same directory. The name of that directory and its location in the file system don’t matter, and don’t have to be the same as on Ada’s computer. Gladys can put the files in a directory /Users/gladys/from_ada/ and the path (and code) will still work. Relative paths can include directories. For example, suppose that Charles wants to write a relative path from the Users directory to a cool selfie he took. Then he can write: charles/cool_hair_selfie.jpg You can read this path as, “Starting from wherever you are, go to the charles directory, and from there go to the cool_hair_selfie.jpg file.” In other words, the relative path depends on the context of the code or program that uses it. When use you paths in R code, they should almost always be relative paths. This ensures that the code is portable to other computers, which is an important aspect of reproducibility. Another benefit is that relative paths tend to be shorter, making your code easier to read (and write). When you write paths, there are three shortcuts you can use. These are most useful in relative paths, but also work in absolute paths: . means the current directory. .. means the directory above the current directory. ~ means the home directory. Each user has their own home directory, whose location depends on the operating system and their username. Home directories are typically found inside C:/Users/ on Windows, /Users/ on macOS, and /home/ on Linux. As an example, suppose Ada wants to write a (relative) path from the ada directory to Charles’ cool selfie. Using these shorcuts, she can write: ../charles/cool_hair_selfie.jpg Read this as, “Starting from wherever you are, go up one directory, then go to the charles directory, and then go to the cool_hair_selfie.jpg file.” Since /Users/ada is Ada’s home directory, she could also write the path as: ~/../charles/cool_hair_selfie.jpg This path has the same effect, but the meaning is slightly different. You can read it as “Starting from your home directory, go up one directory, then go to the charles directory, and then go to the cool_hair_selfie.jpg file.” The .. and ~ shortcut are frequently used and worth remembering. The . shortcut is included here in case you see it in someone else’s code. Since it means the current directory, a path like ./cats.csv is identical to cats.csv, and the latter is preferable for being simpler. There are a few specific situations where . is necessary, but they fall outside the scope of this text. 1.4.2 R Scripts Now that you know how file systems and paths work, you’re ready to learn how to save your R code to a file. R code is usually saved into an R script (extension .R) or an R Markdown file (extension .Rmd). R scripts are slightly simpler, so let’s focus on those. In RStudio, you can create a new R script with this menu option: File -&gt; New File -&gt; R Script This will open a new pane in RStudio, like this: The new pane is the scripts pane, which displays all of the R scripts you’re editing. Each script appears in a separate tab. In the screenshot, only one script, the new script, is open. Editing a script is similar to editing any other text document. You can write, delete, copy, cut, and paste text. You can also save the file to your computer’s file system. When you do, pay attention to where you save the file, as you might need it later. The contents of an R script should be R code. Anything else you want to write in the script (notes, documentation, etc.) should be in a comment. In R, comments begin with # and extend to the end of the line: # This is a comment. R will ignore comments when you run your code. When you start a new project, it’s a good idea to create a specific directory for all of the project’s files. If you’re using R, you should also create one or more R scripts in that directory. As you work, write your code directly into a script. Arrange your code in the order of the steps to solve the problem, even if you write some parts before others. Comment out or delete any lines of code that you try but ultimately decide you don’t need. Make sure to save the file periodically so that you don’t lose your work. Following these guidelines will help you stay organized and make it easier to share your code with others later. While editing, you can run the current line in the R console by pressing Ctrl+Enter on Windows and Linux, or Cmd+Enter on macOS. This way you can test and correct your code as you write it. If you want, you can instead run (or source) the entire R script, by calling the source function with the path to the script as an argument. This is also what the “Source on Save” check box refers to in RStudio. The code runs in order, only stopping if an error occurs. For instance, if you save the script as my_cool_script.R, then you can run source(\"my_cool_script.R\") in the console to run the entire script (pay attention to the path—it may be different on your computer). R Markdown files are an alternative format for storing R code. They provide a richer set of formatting options, and are usually a better choice than R scripts if you’re writing a report that contains code. You can learn more about R Markdown files here. 1.4.3 The Working Directory Section 1.4.1 explained that relative paths have a starting point that depends on the context where the path is used. We can make that idea more concrete for R. The working directory is the starting point R uses for relative paths. Think of the working directory as the directory R is currently “at” or watching. The function getwd returns the absolute path for the current working directory, as a string. It doesn’t require any arguments: getwd() ## [1] &quot;/home/nick/workshop/datalab/workshop_r_basics&quot; On your computer, the output from getwd will likely be different. This is a very useful function for getting your bearings when you write relative paths. If you write a relative path and it doesn’t work as expected, the first thing to do is check the working directory. The related setwd function changes the working directory. It takes one argument: a path to the new working directory. Here’s an example: setwd(&quot;..&quot;) # Now check the working directory. getwd() ## [1] &quot;/home/nick/workshop/datalab&quot; Generally, you should avoid using calls to setwd in your R scripts and R Markdown files. Calling setwd makes your code more difficult to understand, and can always be avoided by using appropriate relative paths. If you call setwd with an absolute path, it also makes your code less portable to other computers. It’s fine to use setwd interactively (in the R console), but avoid making your saved code dependent on it. Another function that’s useful for dealing with the working directory and file system is list.files. The list.files function returns the names of all of the files and directories inside of a directory. It accepts a path to a directory as an argument, or assumes the working directory if you don’t pass a path. For instance: # List files and directories in /home/. list.files(&quot;/home/&quot;) ## [1] &quot;lost+found&quot; &quot;nick&quot; # List files and directories in the working directory. list.files() ## [1] &quot;_bookdown.yml&quot; &quot;_main.rds&quot; ## [3] &quot;01_r-basics.Rmd&quot; &quot;02_data-structures.Rmd&quot; ## [5] &quot;03_exploring-your-data.Rmd&quot; &quot;99_acknowledgements.Rmd&quot; ## [7] &quot;data&quot; &quot;docs&quot; ## [9] &quot;img&quot; &quot;index.md&quot; ## [11] &quot;index.Rmd&quot; &quot;index.utf8.md&quot; ## [13] &quot;knit.R&quot; &quot;makefile&quot; ## [15] &quot;raw&quot; &quot;README.md&quot; ## [17] &quot;render4e1f343f2ce3e.rds&quot; &quot;renv&quot; ## [19] &quot;renv.lock&quot; As usual, since you have a different computer, you’re likely to see different output if you run this code. If you call list.files with an invalid path or an empty directory, the output is character(0): list.files(&quot;/this/path/is/fake/&quot;) ## character(0) Later on, we’ll learn about what character(0) means more generally. 1.5 Reading Files Analyzing data sets is one of the most common things to do in R. The first step is to get R to read your data. Data sets come in a variety of file formats, and you need to identify the format in order to tell R how to read the data. Most of the time, you can guess the format of a file by looking at its extension, the characters (usually three) after the last dot . in the filename. For example, the extension .jpg or .jpeg indicates a JPEG image file. Some operating systems hide extensions by default, but you can find instructions to change this setting online by searching for “show file extensions” and your operating system’s name. The extension is just part of the file’s name, so it should be taken as a hint about the file’s format rather than a guarantee. R has built-in functions for reading a variety of formats. The R community also provides packages, shareable and reusable pieces of code, to read even more formats. You’ll learn more about packages later, in Section 3.3. For now, let’s focus on data sets that can be read with R’s built-in functions. Here are several formats that are frequently used to distribute data, along with the name of a built-in function or contributed package that can read the format: Name Extension Function or Package Tabular? Text? Comma-separated Values .csv read.csv Yes Yes Tab-separated Values .tsv read.delim Yes Yes Fixed-width File .fwf read.fwf Yes Yes Microsoft Excel .xlsx readr package Yes No Microsoft Excel 1993-2007 .xls readr package Yes No Apache Arrow .feather arrow package Yes No R Data .rds readRDS Sometimes No R Data .rda load Sometimes No Plaintext .txt readLines Sometimes Yes Extensible Markup Language .xml xml2 package No Yes JavaScript Object Notation .json jsonlite package No Yes A tabular data set is one that’s structured as a table, with rows and columns. We’ll focus on tabular data sets for most of this reader, since they’re easier to get started with. Here’s an example of a tabular data set: Fruit Quantity Price apple 32 1.49 banana 541 0.79 pear 10 1.99 A text file is one that contains human-readable lines of text. You can check this by opening the file with a text editor such as Microsoft Notepad or macOS TextEdit. Many file formats use text in order to make the format easier to work with. For instance, a comma-separated values (CSV) file records a tabular data using one line per row, with commas separating columns. If you store the table above in a CSV file and open the file in a text editor, here’s what you’ll see: Fruit,Quantity,Price apple,32,1.49 banana,541,0.79 pear,10,1.99 A binary file is one that’s not human-readable. You can’t just read off the data if you open a binary file in a text editor, but they have a number of other advantages. Compared to text files, binary files are often faster to read and take up less storage space (bytes). As an example, R’s built-in binary format is called RDS (which may stand for “R data serialized”). RDS files are extremely useful for backing up work, since they can store any kind of R object, even ones that are not tabular. You can learn more about how to create an RDS file on the ?saveRDS help page, and how to read one on the ?readRDS help page. 1.5.1 Hello, Data! Let’s read our first data set! Over the next few sections, we’re going to explore data from the U.S. Bureau of Labor Statistics about median employee earnings. The data set was prepared as part of the Tidy Tuesday R community project. You can find more details about the data set here, and you can download the data set here (you may need to choose File -&gt; Save As... in your browser’s menu). The data set is a file called earn.csv, which suggests it’s a CSV file. In this case, the extension is correct, so we can read the file into R with the built-in read.csv function. The first argument is the path to where you saved the file, which may be different on your computer. The read.csv function returns the data set, but R won’t keep the data in memory unless we assign the returned result to a variable: earn = read.csv(&quot;data/earn.csv&quot;) The variable name earn here is arbitrary; you can choose something different if you want. However, in general, it’s a good habit to choose variable names that describe the contents of the variable somehow. If you tried running the line of code above and got an error message, pay attention to what the error message says, and remember the strategies to get help in Section 1.3. The most common mistake when reading a file is incorrectly specifying the path, so first check that you got the path right. If you ran the line of code and there was no error message, congratulations, you’ve read your first data set into R! 1.6 Data Frames Now that we’ve loaded the data, let’s take a look at it. When you’re working with a new data set, it’s usually not a good idea to print it out directly (by typing earn, in this case) until you know how big it is. Big data sets can take a long time to print, and the output can be difficult to read. Instead, you can use the head function to print only the beginning, or head, of a data set. Let’s take a peek: head(earn) ## sex race ethnic_origin age year quarter n_persons ## 1 Both Sexes All Races All Origins 16 years and over 2010 1 96821000 ## 2 Both Sexes All Races All Origins 16 years and over 2010 2 99798000 ## 3 Both Sexes All Races All Origins 16 years and over 2010 3 101385000 ## 4 Both Sexes All Races All Origins 16 years and over 2010 4 100120000 ## 5 Both Sexes All Races All Origins 16 years and over 2011 1 98329000 ## 6 Both Sexes All Races All Origins 16 years and over 2011 2 100593000 ## median_weekly_earn ## 1 754 ## 2 740 ## 3 740 ## 4 752 ## 5 755 ## 6 753 This data set is tabular—as you might have already guessed, since it came from a CSV file. In R, it’s represented by a data frame, a table with rows and columns. R uses data frames to represent most (but not all) kinds of tabular data. The read.csv function, which we used to read this data, always returns a data frame. For a data frame, the head function only prints the first six rows. If there are lots of columns or the columns are wide, as is the case here, R wraps the output across lines. When you first read an object into R, you might not know whether it’s a data frame. One way to check is visually, by printing it, as we just did. A better way to check is with the class function, which returns information about what an object is. For a data frame, the result will always contain data.frame: class(earn) ## [1] &quot;data.frame&quot; We’ll learn more about classes in Section 2.1, but for now you can use this function to identify data frames. By counting the columns in the output from head(earn), we can see that this data set has eight columns. A more convenient way to check the number of columns in a data set is with the ncol function: ncol(earn) ## [1] 8 The similarly-named nrow function returns the number of rows: nrow(earn) ## [1] 4224 Alternatively, you can get both numbers at the same time with the dim (short for “dimensions”) function. Since the columns have names, we might also want to get just these. You can do that with the names or colnames functions. Both return the same result: names(earn) ## [1] &quot;sex&quot; &quot;race&quot; &quot;ethnic_origin&quot; ## [4] &quot;age&quot; &quot;year&quot; &quot;quarter&quot; ## [7] &quot;n_persons&quot; &quot;median_weekly_earn&quot; colnames(earn) ## [1] &quot;sex&quot; &quot;race&quot; &quot;ethnic_origin&quot; ## [4] &quot;age&quot; &quot;year&quot; &quot;quarter&quot; ## [7] &quot;n_persons&quot; &quot;median_weekly_earn&quot; If the rows have names, you can get those with the rownames function. For this particular data set, the rows don’t have names. 1.6.1 Summarizing Data An efficient way to get a sense of what’s actually in a data set is to have R compute summary information. This works especially well for data frames, but also applies to other data. R provides two different functions to get summaries: str and summary. The str function returns a structural summary of an object. This kind of summary tells us about the structure of the data—the number of rows, the number and names of columns, what kind of data is in each column, and some sample values. Here’s the structural summary for the earnings data: str(earn) ## &#39;data.frame&#39;: 4224 obs. of 8 variables: ## $ sex : chr &quot;Both Sexes&quot; &quot;Both Sexes&quot; &quot;Both Sexes&quot; &quot;Both Sexes&quot; ... ## $ race : chr &quot;All Races&quot; &quot;All Races&quot; &quot;All Races&quot; &quot;All Races&quot; ... ## $ ethnic_origin : chr &quot;All Origins&quot; &quot;All Origins&quot; &quot;All Origins&quot; &quot;All Origins&quot; ... ## $ age : chr &quot;16 years and over&quot; &quot;16 years and over&quot; &quot;16 years and over&quot; &quot;16 years and over&quot; ... ## $ year : int 2010 2010 2010 2010 2011 2011 2011 2011 2012 2012 ... ## $ quarter : int 1 2 3 4 1 2 3 4 1 2 ... ## $ n_persons : int 96821000 99798000 101385000 100120000 98329000 100593000 101447000 101458000 100830000 102769000 ... ## $ median_weekly_earn: int 754 740 740 752 755 753 753 764 769 771 ... This summary lists information about each column, and includes most of what we found earlier by using several different functions separately. The summary uses chr to indicate columns of text (“characters”) and int to indicate columns of integers. In contrast to str, the summary function returns a statistical summary of an object. This summary includes summary statistics for each column, choosing appropriate statistics based on the kind of data in the column. For numbers, this is generally the mean, median, and quantiles. For categories, this is the frequencies. Other kinds of statistics are shown for other kinds of data. Here’s the statistical summary for the earnings data: summary(earn) ## sex race ethnic_origin age ## Length:4224 Length:4224 Length:4224 Length:4224 ## Class :character Class :character Class :character Class :character ## Mode :character Mode :character Mode :character Mode :character ## ## ## ## year quarter n_persons median_weekly_earn ## Min. :2010 Min. :1.00 Min. : 103000 Min. : 318.0 ## 1st Qu.:2012 1st Qu.:1.75 1st Qu.: 2614000 1st Qu.: 605.0 ## Median :2015 Median :2.50 Median : 7441000 Median : 755.0 ## Mean :2015 Mean :2.50 Mean : 16268338 Mean : 762.2 ## 3rd Qu.:2018 3rd Qu.:3.25 3rd Qu.: 17555250 3rd Qu.: 911.0 ## Max. :2020 Max. :4.00 Max. :118358000 Max. :1709.0 1.6.2 Selecting Columns You can select an individual column from a data frame by name with $, the dollar sign operator. The syntax is: VARIABLE$COLUMN_NAME For instance, for the earnings data, earn$age selects the age column, and earn$n_persons selects the n_persons column. So one way to compute the mean of the n_persons column is: mean(earn$n_persons) ## [1] 16268338 Similarly, to compute the range of the year column: range(earn$year) ## [1] 2010 2020 You can also use the dollar sign operator to assign values to columns. For instance, to assign 0 to the entire quarter column: earn$quarter = 0 Be careful when you do this, as there is no undo. Fortunately, we haven’t applied any transformations to the earnings data yet, so we can reset the earn variable back to what it was by reloading the data set: earn = read.csv(&quot;data/earn.csv&quot;) In Section 2.5, we’ll learn how to select rows and individual elements from a data frame, as well as other ways to select columns. 1.7 Vectors A vector is a collection of values. Vectors are the fundamental unit of data in R, and we’ve already used them in the previous sections. For instance, each column in a data frame is a vector. So the quarter column in the earnings data is a vector. Let’s take a look at it. We can use head again to avoid printing too much, this time specifying with the second argument that we want to print exactly 10 values: head(earn$quarter, 10) ## [1] 1 2 3 4 1 2 3 4 1 2 Like all vectors, this vector is ordered, which just means the values, or elements, have specific positions. The value of the 1st element is 1, the 2nd is 2, the 5th is also 1, and so on. Notice that the elements of this vector are all integers. This isn’t just a quirk of the earnings data set. In R, the elements of a vector must all be the same type of data (we say the elements are homogeneous). A vector can contain integers, decimal numbers, strings, or several other types of data, but not a mix these all at once. The other columns in the earnings data frame are also vectors. For instance, the age column is a vector of strings: head(earn$age) ## [1] &quot;16 years and over&quot; &quot;16 years and over&quot; &quot;16 years and over&quot; ## [4] &quot;16 years and over&quot; &quot;16 years and over&quot; &quot;16 years and over&quot; Vectors can have any number of elements, including 0 or 1 element. Unlike mathematics, R does not distinguish between vectors and scalars (solitary values). So as far as R is concerned, a solitary value, like 3, is a vector with 1 element. You can check the length of a vector (and other objects) with the length function: length(3) ## [1] 1 length(&quot;hello&quot;) ## [1] 1 length(earn$age) ## [1] 4224 Since the last of these is a column from the data frame earn, the length is the same as the number of rows in earn. 1.7.1 Creating Vectors Sometimes you’ll want to create your own vectors. You can do this by concatenating several vectors together with the c function. It accepts any number of vector arguments, and combines them into a single vector: c(1, 2, 19, -3) ## [1] 1 2 19 -3 c(&quot;hi&quot;, &quot;hello&quot;) ## [1] &quot;hi&quot; &quot;hello&quot; c(1, 2, c(3, 4)) ## [1] 1 2 3 4 If the arguments you pass to the c function have different data types, R will attempt to convert them to a common data type that preserves the information: c(1, &quot;cool&quot;, 2.3) ## [1] &quot;1&quot; &quot;cool&quot; &quot;2.3&quot; The colon operator : creates vectors that contain sequences of integers. This is useful for creating “toy” data to test things on, and later we’ll see that it’s also important in several other contexts. Here are a few different sequences: 1:3 ## [1] 1 2 3 -3:5 ## [1] -3 -2 -1 0 1 2 3 4 5 10:1 ## [1] 10 9 8 7 6 5 4 3 2 1 Beware that both endpoints are included in the sequence, even in sequences like 1:0, and that the difference between elements is always -1 or 1. If you want more control over the generated sequence, use the seq function instead. 1.7.2 Vectorization Let’s look at what happens if we call a mathematical function, like sin, on a vector: x = c(1, 3, 0, pi) sin(x) ## [1] 8.414710e-01 1.411200e-01 0.000000e+00 1.224647e-16 This gives us the same result as if we had called the function separately on each element. That is, the result is the same as: c(sin(1), sin(3), sin(0), sin(pi)) ## [1] 8.414710e-01 1.411200e-01 0.000000e+00 1.224647e-16 Of course, the first version is much easier to type. Functions that take a vector argument and get applied element-by-element like this are said to be vectorized. Most functions in R are vectorized, especially math functions. Some examples include sin, cos, tan, log, exp, and sqrt. Functions that are not vectorized tend to be ones that combine or aggregate values in some way. For instance, the sum, mean, median, length, and class functions are not vectorized. A function can be vectorized across multiple arguments. This is easiest to understand in terms of the arithmetic operators. Let’s see what happens if we add two vectors together: x = c(1, 2, 3, 4) y = c(-1, 7, 10, -10) x + y ## [1] 0 9 13 -6 The elements are paired up and added according to their positions. The other arithmetic operators are also vectorized: x - y ## [1] 2 -5 -7 14 x * y ## [1] -1 14 30 -40 x / y ## [1] -1.0000000 0.2857143 0.3000000 -0.4000000 1.7.3 Recycling When a function is vectorized across multiple arguments, what happens if the vectors have different lengths? Whenever you think of a question like this as you’re learning R, the best way to find out is to create some toy data and test it yourself. Let’s try that now: x = c(1, 2, 3, 4) y = c(-1, 1) x + y ## [1] 0 3 2 5 The elements of the shorter vector are recycled to match the length of the longer vector. That is, after the second element, the elements of y are repeated to make a vector with the same length as x (because x is longer), and then vectorized addition is carried out as usual. Here’s what that looks like written down: 1 2 3 4 + -1 1 -1 1 ----------- 0 3 2 5 If the length of the longer vector is not a multiple of the length of the shorter vector, R issues a warning, but still returns the result. The warning as meant as a reminder, because unintended recycling is a common source of bugs: x = c(1, 2, 3, 4, 5) y = c(-1, 1) x + y ## Warning in x + y: longer object length is not a multiple of shorter object ## length ## [1] 0 3 2 5 4 Recycling might seem strange at first, but it’s convenient if you want to use a specific value (or pattern of values) with a vector. For instance, suppose you want to multiply all the elements of a vector by 2. Recycling makes this easy: 2 * c(1, 2, 3) ## [1] 2 4 6 When you use recycling, most of the time one of the arguments will be a scalar like this. 1.7.4 Making Comparisons Comparisons are among the most common operations on vectors. The comparison operators are: &lt; for “less than” &gt; for “greater than” &lt;= for “less than or equal to” &gt;= for “greater than or equal to” == for “equal to” != for “not equal to” %in% for containment (explained below) The “equal to” operator uses two equal signs so that R can distinguish it from =, the assignment operator. Like the arithmetic operators, the comparison operators are vectorized. Let’s look at a few examples with length-one vectors: 1 &lt; 3 ## [1] TRUE &quot;a&quot; == &quot;b&quot; ## [1] FALSE 3.1 == 3.1 ## [1] TRUE When you make a comparison, R returns a logical value, TRUE or FALSE, to indicate the result. Logical values are different from strings, so they are not quoted. Logical values just like most other data types. You can use them in computations, and you can create vectors of them. Here’s some examples: TRUE ## [1] TRUE c(TRUE, FALSE, FALSE) ## [1] TRUE FALSE FALSE TRUE == FALSE ## [1] FALSE Now let’s see what happens when we compare longer vectors: c(1, 2, 3) &lt; c(1, 3, -3) ## [1] FALSE TRUE FALSE c(&quot;he&quot;, &quot;saw&quot;, &quot;her&quot;) == c(&quot;she&quot;, &quot;saw&quot;, &quot;him&quot;) ## [1] FALSE TRUE FALSE Since the comparison operators are all vectorized, the elements of the vectors are compared element-by-element, and R returns a logical value for each pair. What if you want to test whether all the elements in a vector are equal (or unequal)? There are several ways to do this. One is to use the all function on the result of the comparison. The all function takes a vector of logical values and returns TRUE if all of them are TRUE, and returns FALSE otherwise: all(c(1, 2, 3) &lt; c(1, 3, -3)) ## [1] FALSE The related any function returns TRUE if any one element is TRUE, and returns FALSE otherwise: any(c(&quot;hi&quot;, &quot;hello&quot;) == c(&quot;hi&quot;, &quot;bye&quot;)) ## [1] TRUE There are two more ways to test whether objects are equal: The all.equal function tests whether objects are equal up to some acceptable difference called the tolerance. You should generally use all.equal rather than == to compare decimal numbers. Computer representations for decimal numbers are inherently imprecise, so comparison using a (small) tolerance is often necessary. The identical function checks whether objects are completely identical, including their metadata (names, dimensions, and so on). Use this to compare non-vector objects such as data frames. This function also works for vectors, but most of the time == is sufficient. Another common comparison is to check whether elements of one vector are contained in another vector at any position. For instance, suppose you want to check whether 1 or 2 appear anywhere in a longer vector x. Here’s how to do it: x = c(3, 4, 2, 7, 3, 7) c(1, 2) %in% x ## [1] FALSE TRUE R returns FALSE for the 1 because there’s no 1 in x, and returns TRUE for the 2 because there is a 2 in x. Notice that this is different from comparing with ==. If we use ==, the shorter vector is recycled until its length matches the longer one, and then compared element-by-element. For the example, this means only the elements at odd-numbered positions are compared to 1, and only the elements at even-numbered positions are compared to 2: c(1, 2) == x ## [1] FALSE FALSE FALSE FALSE FALSE FALSE Finally, new programmers sometimes incorrectly think they need to append == TRUE to their comparisons. This is redundant, makes your code harder to understand, and wastes computational time. Comparisons already return logical values. If the result of the comparison is TRUE, then TRUE == TRUE is again just TRUE. If the result is FALSE, then FALSE == TRUE is again just FALSE. Likewise, if you want to invert a condition, choose an appropriate operator rather than appending == FALSE. "],["data-structures.html", "2 Data Structures 2.1 Data Types 2.2 Special Values 2.3 Matrices 2.4 Factors 2.5 Indexing", " 2 Data Structures 2.1 Data Types 2.1.1 Lists 2.2 Special Values 2.3 Matrices 2.4 Factors 2.5 Indexing "],["exploring-your-data.html", "3 Exploring Your Data 3.1 Apply Functions 3.2 Functions 3.3 Packages 3.4 Data Visualization", " 3 Exploring Your Data 3.1 Apply Functions 3.1.1 The Split-Apply Pattern 3.2 Functions 3.2.1 Variable Scope &amp; Lookup 3.3 Packages 3.4 Data Visualization 3.4.1 Saving Your Plots "],["acknowledgements.html", "Acknowledgements", " Acknowledgements Sincere thanks to: Duncan Temple Lang, whose guidance and encouragement has had outsize influence on the way I think about and teach data science. Deb Nolan, for being a role model as a data scientist, educator, and academic. Special thanks for the opportunity to collaborate on STAT 33 (on which this reader and workshop is loosely based) at Cal. The rest of the DataLab team, for support and many thoughtful discussions about data science: Wesley Brooks Glenda Gaines Jared Joseph Arthur Koehl Oliver Kreylos Pamela Reynolds Tyler Shoemaker Carl Stahmer Michele Tobias Last but not least, every former student that asked questions or offered feedback when I taught. "]]
